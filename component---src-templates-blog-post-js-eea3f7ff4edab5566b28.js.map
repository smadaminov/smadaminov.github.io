{"version":3,"file":"component---src-templates-blog-post-js-eea3f7ff4edab5566b28.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/components/bio.js","webpack://gatsby-starter-blog/./src/components/layout.js","webpack://gatsby-starter-blog/./src/components/seo.js","webpack://gatsby-starter-blog/./src/templates/blog-post.js"],"sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n  const social = data.site.siteMetadata?.social\n\n  return (\n    <div className=\"bio\">\n      <StaticImage\n        className=\"bio-avatar\"\n        layout=\"fixed\"\n        formats={[\"auto\", \"webp\", \"avif\"]}\n        src=\"../images/myface.jpg\"\n        width={50}\n        height={50}\n        quality={95}\n        alt=\"Profile picture\"\n      />\n      {author?.name && (\n        <p>\n          Hey, I am <strong>{author.name}</strong>, {author?.summary || null}\n          {` `}\n          <a href={`https://twitter.com/${social?.twitter || ``}`}>\n            And sometimes I post on Twitter.\n          </a>\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default Bio\n","import * as React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n  let header\n\n  if (isRootPath) {\n    header = (\n      <h1 className=\"main-heading\">\n        <Link to=\"/\">{title}</Link>\n      </h1>\n    )\n  } else {\n    header = (\n      <Link className=\"header-link-home\" to=\"/\">\n        {title}\n      </Link>\n    )\n  }\n\n  let mynews = (\n      <p>\n      My talk on new building system~{\"\\n\"}\n      for OVS was accepted at OVSCON'21!\n      </p>\n  )\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      <header className=\"global-header\">{header}</header>\n      <div id=\"nr\">{mynews}</div>\n      <main>{children}</main>\n      <footer>\n        © {new Date().getFullYear()}, Built with\n        {` `}\n        <a href=\"https://www.gatsbyjs.com\">Gatsby</a>\n      </footer>\n    </div>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, lang, meta, title }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={defaultTitle ? `%s | ${defaultTitle}` : null}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata?.social?.twitter || ``,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSeo.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSeo.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default Seo\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst BlogPostTemplate = ({ data, location }) => {\n  const post = data.markdownRemark\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const { previous, next } = data\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n      />\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\n          <p>{post.frontmatter.date}</p>\n        </header>\n        <section\n          dangerouslySetInnerHTML={{ __html: post.html }}\n          itemProp=\"articleBody\"\n        />\n        <hr />\n        <footer>\n          <Bio />\n        </footer>\n      </article>\n      <nav className=\"blog-post-nav\">\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n"],"names":["data","useStaticQuery","author","site","siteMetadata","social","className","S","layout","formats","src","width","height","quality","alt","name","summary","href","twitter","header","location","title","children","isRootPath","pathname","Link","to","mynews","id","Date","getFullYear","Seo","description","lang","meta","metaDescription","defaultTitle","htmlAttributes","titleTemplate","content","property","concat","defaultProps","post","markdownRemark","siteTitle","previous","next","frontmatter","excerpt","itemScope","itemType","itemProp","date","dangerouslySetInnerHTML","__html","html","style","display","flexWrap","justifyContent","listStyle","padding","fields","slug","rel"],"sourceRoot":""}